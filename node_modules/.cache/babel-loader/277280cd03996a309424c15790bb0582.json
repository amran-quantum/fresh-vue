{"remainingRequest":"/home/amran/test-projects/vue/vue-record/node_modules/babel-loader/lib/index.js!/home/amran/test-projects/vue/vue-record/node_modules/eslint-loader/index.js??ref--13-0!/home/amran/test-projects/vue/vue-record/src/components/loadScripts.js","dependencies":[{"path":"/home/amran/test-projects/vue/vue-record/src/components/loadScripts.js","mtime":1623858217000},{"path":"/home/amran/test-projects/vue/vue-record/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/amran/test-projects/vue/vue-record/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/amran/test-projects/vue/vue-record/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/amran/test-projects/vue/vue-record/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\n/**\r\n * Dinamically load script into DOM\r\n * @see https://gist.github.com/lidio601/81974ecf4564dbf257f80a969dcbdd5c\r\n *\r\n * Example usage:\r\n * {code}\r\n\r\n  require('./loadScript');\r\n\r\n  console.log('starting');\r\n  loadScripts([\r\n    \"https://cdn.jsdelivr.net/npm/opus-media-recorder@latest/OpusMediaRecorder.umd.js\",\r\n    \"https://cdn.jsdelivr.net/npm/opus-media-recorder@latest/encoderWorker.umd.js\"\r\n  ], { debug: true })\r\n    .then(() => console.log(\"finished\"))\r\n    .catch(console.error);\r\n {/code}\r\n */\n\n/**\r\n * @see https://stackoverflow.com/questions/16839698/jquery-getscript-alternative-in-native-javascript\r\n */\nexport var loadScript = function loadScript(source) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$beforeEl = _ref.beforeEl,\n      beforeEl = _ref$beforeEl === void 0 ? false : _ref$beforeEl,\n      _ref$afterEl = _ref.afterEl,\n      afterEl = _ref$afterEl === void 0 ? false : _ref$afterEl,\n      _ref$async = _ref.async,\n      async = _ref$async === void 0 ? true : _ref$async,\n      _ref$defer = _ref.defer,\n      defer = _ref$defer === void 0 ? true : _ref$defer,\n      _ref$debug = _ref.debug,\n      debug = _ref$debug === void 0 ? false : _ref$debug;\n\n  return new Promise(function (resolve, reject) {\n    var script = document.createElement(\"script\");\n    var shouldInjectBefore = !afterEl; // defaults to before\n\n    var scripts = document.getElementsByTagName(\"script\"); // check whenever this script is not already included!\n\n    var existingOne = Array.prototype.slice.call(scripts).filter(function (elem) {\n      return elem.src === source;\n    });\n\n    if (existingOne.length) {\n      debug && console.warn(\"loadScript :: skipped because it's already loaded\", {\n        source: source\n      });\n      return resolve(existingOne);\n    }\n\n    var prior = beforeEl || (scripts.length > 0 ? scripts[0] : null);\n    var after = afterEl || (scripts.length > 0 ? [scripts.length - 1] : null);\n    script.async = async;\n    script.defer = defer;\n\n    function onloadHander(_, isAbort) {\n      if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {\n        script.onload = null;\n        script.onreadystatechange = null;\n        script = undefined;\n\n        if (isAbort) {\n          reject(new Error(\"loadScript :: error while loading script from \".concat(script)));\n        } else {\n          resolve(script);\n        }\n      }\n    }\n\n    script.onload = onloadHander;\n    script.onreadystatechange = onloadHander;\n    script.src = source;\n\n    if (shouldInjectBefore && beforeEl) {\n      prior.parentNode.insertBefore(script, prior);\n    } else if (!shouldInjectBefore && afterEl) {\n      // Note: There is no insertAfter() method.\n      // It can be emulated by combining the insertBefore method with Node.nextSibling.\n      prior.parentNode.insertBefore(script, after.nextSibling);\n    } else {\n      document.head.appendChild(script);\n    }\n  });\n};\nexport var loadScripts =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(sources) {\n    var _ref3,\n        _ref3$beforeEl,\n        beforeEl,\n        _ref3$afterEl,\n        afterEl,\n        _ref3$async,\n        async,\n        _ref3$defer,\n        defer,\n        _ref3$debug,\n        debug,\n        firstScript,\n        _args = arguments;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref3 = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, _ref3$beforeEl = _ref3.beforeEl, beforeEl = _ref3$beforeEl === void 0 ? false : _ref3$beforeEl, _ref3$afterEl = _ref3.afterEl, afterEl = _ref3$afterEl === void 0 ? false : _ref3$afterEl, _ref3$async = _ref3.async, async = _ref3$async === void 0 ? true : _ref3$async, _ref3$defer = _ref3.defer, defer = _ref3$defer === void 0 ? true : _ref3$defer, _ref3$debug = _ref3.debug, debug = _ref3$debug === void 0 ? false : _ref3$debug;\n            // defaults to []\n            sources = sources || []; // ensure that is an array\n\n            sources = typeof sources.forEach === \"function\" ? sources : [sources]; // if it's empty\n\n            if (!(sources.length === 0)) {\n              _context.next = 6;\n              break;\n            }\n\n            debug && console.log(\"loadScripts :: ended\");\n            return _context.abrupt(\"return\");\n\n          case 6:\n            // include scripts in order\n            firstScript = sources.shift();\n            debug && console.log(\"loadScripts :: loading\", firstScript);\n            return _context.abrupt(\"return\", loadScript(firstScript, {\n              beforeEl: beforeEl,\n              afterEl: afterEl,\n              async: async,\n              defer: defer\n            }) // recursion here!\n            .then(function (elem) {\n              debug && console.log(\"loadScripts :: loaded\", firstScript);\n              return loadScripts(sources, {\n                // continue injecting the other scripts\n                // after this one\n                afterEl: elem,\n                async: async,\n                defer: defer,\n                debug: debug\n              });\n            }));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function loadScripts(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();",{"version":3,"sources":["/home/amran/test-projects/vue/vue-record/src/components/loadScripts.js"],"names":["loadScript","source","beforeEl","afterEl","async","defer","debug","Promise","resolve","reject","script","document","createElement","shouldInjectBefore","scripts","getElementsByTagName","existingOne","Array","prototype","slice","call","filter","elem","src","length","console","warn","prior","after","onloadHander","_","isAbort","readyState","test","onload","onreadystatechange","undefined","Error","parentNode","insertBefore","nextSibling","head","appendChild","loadScripts","sources","forEach","log","firstScript","shift","then"],"mappings":"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","sourcesContent":["/**\r\n * Dinamically load script into DOM\r\n * @see https://gist.github.com/lidio601/81974ecf4564dbf257f80a969dcbdd5c\r\n *\r\n * Example usage:\r\n * {code}\r\n\r\n  require('./loadScript');\r\n\r\n  console.log('starting');\r\n  loadScripts([\r\n    \"https://cdn.jsdelivr.net/npm/opus-media-recorder@latest/OpusMediaRecorder.umd.js\",\r\n    \"https://cdn.jsdelivr.net/npm/opus-media-recorder@latest/encoderWorker.umd.js\"\r\n  ], { debug: true })\r\n    .then(() => console.log(\"finished\"))\r\n    .catch(console.error);\r\n {/code}\r\n */\r\n\r\n/**\r\n * @see https://stackoverflow.com/questions/16839698/jquery-getscript-alternative-in-native-javascript\r\n */\r\nexport const loadScript = (\r\n  source,\r\n  {\r\n    beforeEl = false,\r\n    afterEl = false,\r\n    async = true,\r\n    defer = true,\r\n    debug = false\r\n  } = {}\r\n) => {\r\n  return new Promise((resolve, reject) => {\r\n    let script = document.createElement(\"script\");\r\n    const shouldInjectBefore = !afterEl; // defaults to before\r\n    const scripts = document.getElementsByTagName(\"script\");\r\n\r\n    // check whenever this script is not already included!\r\n    const existingOne = Array.prototype.slice\r\n      .call(scripts)\r\n      .filter(elem => elem.src === source);\r\n\r\n    if (existingOne.length) {\r\n      debug && console.warn(\"loadScript :: skipped because it's already loaded\", {\r\n        source\r\n      });\r\n\r\n      return resolve(existingOne);\r\n    }\r\n\r\n    const prior = beforeEl || (scripts.length > 0 ? scripts[0] : null);\r\n    const after = afterEl || (scripts.length > 0 ? [scripts.length - 1] : null);\r\n\r\n    script.async = async;\r\n    script.defer = defer;\r\n\r\n    function onloadHander(_, isAbort) {\r\n      if (\r\n        isAbort ||\r\n        !script.readyState ||\r\n        /loaded|complete/.test(script.readyState)\r\n      ) {\r\n        script.onload = null;\r\n        script.onreadystatechange = null;\r\n        script = undefined;\r\n\r\n        if (isAbort) {\r\n          reject(\r\n            new Error(`loadScript :: error while loading script from ${script}`)\r\n          );\r\n        } else {\r\n          resolve(script);\r\n        }\r\n      }\r\n    }\r\n\r\n    script.onload = onloadHander;\r\n    script.onreadystatechange = onloadHander;\r\n\r\n    script.src = source;\r\n\r\n    if (shouldInjectBefore && beforeEl) {\r\n      prior.parentNode.insertBefore(script, prior);\r\n    } else if (!shouldInjectBefore && afterEl) {\r\n      // Note: There is no insertAfter() method.\r\n      // It can be emulated by combining the insertBefore method with Node.nextSibling.\r\n      prior.parentNode.insertBefore(script, after.nextSibling);\r\n    } else {\r\n      document.head.appendChild(script);\r\n    }\r\n  });\r\n};\r\n\r\nexport const loadScripts = async (\r\n  sources,\r\n  {\r\n    beforeEl = false,\r\n    afterEl = false,\r\n    async = true,\r\n    defer = true,\r\n    debug = false\r\n  } = {}\r\n) => {\r\n  // defaults to []\r\n  sources = sources || [];\r\n  // ensure that is an array\r\n  sources = typeof sources.forEach === \"function\" ? sources : [sources];\r\n  // if it's empty\r\n  if (sources.length === 0) {\r\n    debug && console.log(\"loadScripts :: ended\");\r\n    return;\r\n  }\r\n\r\n  // include scripts in order\r\n  const firstScript = sources.shift();\r\n  debug && console.log(\"loadScripts :: loading\", firstScript);\r\n\r\n  return (\r\n    loadScript(firstScript, { beforeEl, afterEl, async, defer })\r\n      // recursion here!\r\n      .then(elem => {\r\n        debug && console.log(\"loadScripts :: loaded\", firstScript);\r\n\r\n        return loadScripts(sources, {\r\n          // continue injecting the other scripts\r\n          // after this one\r\n          afterEl: elem,\r\n          async,\r\n          defer,\r\n          debug\r\n        });\r\n      })\r\n  );\r\n};\r\n"]}]}