{"remainingRequest":"/home/amran/test-projects/vue/vue-record/node_modules/babel-loader/lib/index.js!/home/amran/test-projects/vue/vue-record/node_modules/eslint-loader/index.js??ref--13-0!/home/amran/test-projects/vue/vue-record/src/components/ElementMixin.js","dependencies":[{"path":"/home/amran/test-projects/vue/vue-record/src/components/ElementMixin.js","mtime":1623860570000},{"path":"/home/amran/test-projects/vue/vue-record/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/amran/test-projects/vue/vue-record/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/amran/test-projects/vue/vue-record/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport RecorderMixin from \"./RecorderMixin\";\nimport SafariRecorderMixin from \"./SafariRecorderMixin\";\nvar mixins = [RecorderMixin];\n\nif (!window.MediaRecorder) {\n  console.warn('Using Safari polyfill');\n  mixins.push(SafariRecorderMixin);\n}\n/**\r\n * The element mixin defines the mode behaviour and creates two\r\n * functions to start and stop the recording execution\r\n */\n\n\nexport default {\n  mixins: mixins,\n  props: {\n    mode: {\n      type: String,\n      default: 'hold',\n      validator: function validator(v) {\n        return ['hold', 'press'].includes(v);\n      }\n    }\n  },\n  methods: {\n    stopRecording: function stopRecording() {\n      if (this.mode === 'press') {\n        return;\n      }\n\n      return this.stop();\n    },\n    startRecording: function startRecording() {\n      if (this.isRecording && this.mode === 'press') {\n        return this.stop();\n      }\n\n      return this.start();\n    }\n  }\n};",{"version":3,"sources":["/home/amran/test-projects/vue/vue-record/src/components/ElementMixin.js"],"names":["RecorderMixin","SafariRecorderMixin","mixins","window","MediaRecorder","console","warn","push","props","mode","type","String","default","validator","v","includes","methods","stopRecording","stop","startRecording","isRecording","start"],"mappings":";;AAAA,OAAOA,aAAP;AACA,OAAOC,mBAAP;AAEA,IAAMC,MAAM,GAAG,CAACF,aAAD,CAAf;;AAEA,IAAI,CAACG,MAAM,CAACC,aAAZ,EAA2B;AACzBC,EAAAA,OAAO,CAACC,IAAR,CAAa,uBAAb;AACAJ,EAAAA,MAAM,CAACK,IAAP,CAAYN,mBAAZ;AACD;AAED;;;;;;AAIA,eAAe;AACbC,EAAAA,MAAM,EAAEA,MADK;AAEbM,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAEC,MADF;AAEJC,MAAAA,OAAO,EAAE,MAFL;AAGJC,MAAAA,SAAS,EAAE,mBAAAC,CAAC;AAAA,eAAI,CAAC,MAAD,EAAS,OAAT,EAAkBC,QAAlB,CAA2BD,CAA3B,CAAJ;AAAA;AAHR;AADD,GAFM;AASbE,EAAAA,OAAO,EAAE;AACPC,IAAAA,aADO,2BACU;AACf,UAAI,KAAKR,IAAL,KAAc,OAAlB,EAA2B;AACzB;AACD;;AACD,aAAO,KAAKS,IAAL,EAAP;AACD,KANM;AAOPC,IAAAA,cAPO,4BAOW;AAChB,UAAI,KAAKC,WAAL,IAAoB,KAAKX,IAAL,KAAc,OAAtC,EAA+C;AAC7C,eAAO,KAAKS,IAAL,EAAP;AACD;;AACD,aAAO,KAAKG,KAAL,EAAP;AACD;AAZM;AATI,CAAf","sourcesContent":["import RecorderMixin from './RecorderMixin'\r\nimport SafariRecorderMixin from './SafariRecorderMixin'\r\n\r\nconst mixins = [RecorderMixin];\r\n\r\nif (!window.MediaRecorder) {\r\n  console.warn('Using Safari polyfill');\r\n  mixins.push(SafariRecorderMixin)\r\n}\r\n\r\n/**\r\n * The element mixin defines the mode behaviour and creates two\r\n * functions to start and stop the recording execution\r\n */\r\nexport default {\r\n  mixins: mixins,\r\n  props: {\r\n    mode: {\r\n      type: String,\r\n      default: 'hold',\r\n      validator: v => ['hold', 'press'].includes(v)\r\n    }\r\n  },\r\n  methods: {\r\n    stopRecording () {\r\n      if (this.mode === 'press') {\r\n        return\r\n      }\r\n      return this.stop()\r\n    },\r\n    startRecording () {\r\n      if (this.isRecording && this.mode === 'press') {\r\n        return this.stop()\r\n      }\r\n      return this.start()\r\n    }\r\n  }\r\n}\r\n"]}]}